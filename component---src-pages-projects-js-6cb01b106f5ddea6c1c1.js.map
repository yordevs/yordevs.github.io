{"version":3,"file":"component---src-pages-projects-js-6cb01b106f5ddea6c1c1.js","mappings":"0JAQQA,EAAwCC,EAAAA,EAAAA,MAAjCC,EAAiCD,EAAAA,EAAAA,KAA3BE,EAA2BF,EAAAA,EAAAA,WAAfG,EAAeH,EAAAA,EAAAA,WAE1CI,GAAeC,EAAAA,EAAAA,SAAOC,EAAAA,MAAV,0EAAGD,CAAH,mWAKDJ,EAAKM,OAAOC,UAEP,qBAAGC,QAAyBV,EAAMW,OAASX,EAAMY,cAC5D,qBAAGF,QAAyBV,EAAMY,WAAaZ,EAAMW,SAG1CX,EAAMW,OAQhBP,EAAWS,GAIHV,EAAWW,UAKP,qBAAGJ,QAAyBV,EAAMY,WAAaZ,EAAMW,UAChE,qBAAGD,QAAyBV,EAAMW,OAASX,EAAMY,aAGlDR,EAAWS,IA6BvB,IAxBe,SAAC,GAAkD,IAAhDE,EAA+C,EAA/CA,GAAIC,EAA2C,EAA3CA,SAAUC,EAAiC,EAAjCA,UAAiC,IAAtBP,QAAAA,OAAsB,SAG/D,MAFmB,YAAYQ,KAAKH,GAIhC,gBAACV,EAAD,CAAcU,GAAIA,EAAIE,UAAWA,EAAWP,QAASA,GAClDM,GAML,gBAACX,EAAD,CACEc,GAAG,IACHC,KAAML,EACNM,OAAO,SACPC,IAAI,sBACJL,UAAWA,EACXP,QAASA,GACRM,K,yIC7DChB,EAAUC,EAAAA,EAAAA,MAEZsB,EAAOjB,EAAAA,QAAAA,IAAAA,WAAH,4DAAGA,CAAH,4HAUJkB,EAAqBlB,EAAAA,QAAAA,EAAAA,WAAH,0EAAGA,CAAH,0CAKlBmB,EAAUnB,EAAAA,QAAAA,IAAAA,WAAH,+DAAGA,CAAH,2GAsCb,EA3BoB,SAAC,GAId,IAAD,IAHJoB,QACEC,YAAeC,EAEb,EAFaA,MAAOC,EAEpB,EAFoBA,OAAQC,EAE5B,EAF4BA,YAAaC,EAEzC,EAFyCA,QAASC,EAElD,EAFkDA,KAGtD,OACE,gBAACT,EAAD,KACGQ,EACC,gBAAC,EAAAE,EAAD,CACEC,OAAOC,EAAAA,EAAAA,GAASJ,GAChBK,MAAO,CACLC,OAAO,aAAcrC,EAAMW,OAC3B2B,aAAc,MACdC,aAAc,SAIlB,gBAACd,EAAD,UAEF,0BAAKG,GACL,0BAAKC,GACL,gBAACL,EAAD,KAAqBM,GACrB,gBAACU,EAAA,EAAD,CAAQzB,GAAIiB,GAAZ,mBC9CAS,EAAgBnC,EAAAA,QAAAA,IAAAA,WAAH,kEAAGA,CAAH,0HA6BnB,EArBqB,SAAC,GAIf,IACCoC,EADF,EAHJC,KACEC,OAAUC,MAITC,QAAO,SAACC,GAAD,QAAYA,EAAKC,KAAKrB,YAAYsB,QACzCC,KAAI,SAACH,GAAD,OAAU,gBAAC,EAAD,CAAaI,IAAKJ,EAAKC,KAAKI,GAAI1B,QAASqB,EAAKC,UAE/D,OACE,gBAACK,EAAA,EAAD,CAAQzB,MAAM,YACZ,sCACA,0IAE6B,gBAAC0B,EAAA,EAAD,CAAUvC,GAAG,YAAb,eAE7B,gBAAC0B,EAAD,KAAgBC","sources":["webpack://yordevs-site/./src/components/Button.js","webpack://yordevs-site/./src/components/ProjectCard.js","webpack://yordevs-site/./src/pages/projects.js"],"sourcesContent":["/* eslint-disable indent */\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"gatsby\";\nimport PropTypes from \"prop-types\";\n\nimport config from \"../theme/config\";\n\nconst { color, font, transition, breakpoint } = config;\n\nconst StyledButton = styled(Link)`\n  display: inline-block;\n\n  text-decoration: none;\n  text-align: center;\n  font-weight: ${font.weight.semibold};\n\n  background-color: ${({ primary }) => (primary ? color.accent : color.background)};\n  color: ${({ primary }) => (primary ? color.background : color.accent)};\n  text-align: center;\n\n  border: 2px solid ${color.accent};\n  border-radius: 25rem;\n\n  padding: 0.3em 2em;\n  margin: 0.5em 0;\n\n  width: 100%;\n\n  @media (${breakpoint.md}) {\n    width: fit-content;\n  }\n\n  transition: all ${transition.standard};\n\n  &:hover,\n  &:focus,\n  &:active {\n    background-color: ${({ primary }) => (primary ? color.background : color.accent)};\n    color: ${({ primary }) => (primary ? color.accent : color.background)};\n  }\n\n  @media (${breakpoint.md}) {\n    width: fit-content;\n  }\n`;\n\nconst Button = ({ to, children, className, primary = false }) => {\n  const isInternal = /^\\/(?!\\/)/.test(to);\n\n  if (isInternal) {\n    return (\n      <StyledButton to={to} className={className} primary={primary}>\n        {children}\n      </StyledButton>\n    );\n  }\n\n  return (\n    <StyledButton\n      as=\"a\"\n      href={to}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      className={className}\n      primary={primary}>\n      {children}\n    </StyledButton>\n  );\n};\n\nexport default Button;\n\nButton.propTypes = {\n  to: PropTypes.string,\n  children: PropTypes.node,\n  primary: PropTypes.bool,\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\";\n\nimport config from \"../theme/config\";\nconst { color } = config;\n\nconst Card = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  text-align: center;\n  padding: 20px;\n  margin: 0 0.5em;\n  margin-bottom: 1em;\n`;\n\nconst ProjectDescription = styled.p`\n  text-align: center;\n  font-style: italic;\n`;\n\nconst NoImage = styled.div`\n  width: 250px;\n  height: 130px;\n  border: 5px solid #555;\n  background-color: #aaa;\n  padding-top: 30px;\n  font-size: 40px;\n`;\n\nimport Button from \"./Button\";\n\nconst ProjectCard = ({\n  project: {\n    frontmatter: { title, client, description, preview, slug },\n  },\n}) => {\n  return (\n    <Card>\n      {preview ? (\n        <GatsbyImage\n          image={getImage(preview)}\n          style={{\n            border: `3px solid ${color.accent}`,\n            borderRadius: \"5px\",\n            marginBottom: \"1em\",\n          }}\n        />\n      ) : (\n        <NoImage>?</NoImage>\n      )}\n      <h2>{title}</h2>\n      <h3>{client}</h3>\n      <ProjectDescription>{description}</ProjectDescription>\n      <Button to={slug}>Find Out More</Button>\n    </Card>\n  );\n};\n\nexport default ProjectCard;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { graphql } from \"gatsby\";\n\nimport Layout from \"../components/Layout\";\nimport styled from \"styled-components\";\nimport TextLink from \"../components/TextLink\";\nimport ProjectCard from \"../components/ProjectCard\";\n\nconst ProjectHolder = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  grid-auto-rows: auto;\n  gap: 1rem;\n  column-gap: 1rem;\n`;\n\nconst ProjectsPage = ({\n  data: {\n    allMdx: { edges },\n  },\n}) => {\n  const Projects = edges\n    .filter((edge) => !!edge.node.frontmatter.date)\n    .map((edge) => <ProjectCard key={edge.node.id} project={edge.node} />);\n\n  return (\n    <Layout title=\"Our Work\">\n      <h1>Our Work</h1>\n      <p>\n        Here are some examples of work we&apos;ve completed, if you like them and want us to do\n        something similar for you, <TextLink to=\"/contact\">Contact Us</TextLink>\n      </p>\n      <ProjectHolder>{Projects}</ProjectHolder>\n    </Layout>\n  );\n};\n\nexport default ProjectsPage;\n\nexport const pageQuery = graphql`\n  query {\n    allMdx(\n      filter: { fileAbsolutePath: { regex: \"/projects/\" } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 250)\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            slug\n            title\n            client\n            description\n            lead\n            developers\n            preview {\n              childImageSharp {\n                gatsbyImageData(\n                  height: 130\n                  width: 250\n                  quality: 100\n                  layout: CONSTRAINED\n                  placeholder: BLURRED\n                  formats: [AUTO, WEBP, AVIF]\n                )\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nProjectsPage.propTypes = {\n  data: PropTypes.object.isRequired,\n};\n"],"names":["color","config","font","transition","breakpoint","StyledButton","styled","Link","weight","semibold","primary","accent","background","md","standard","to","children","className","test","as","href","target","rel","Card","ProjectDescription","NoImage","project","frontmatter","title","client","description","preview","slug","G","image","getImage","style","border","borderRadius","marginBottom","Button","ProjectHolder","Projects","data","allMdx","edges","filter","edge","node","date","map","key","id","Layout","TextLink"],"sourceRoot":""}